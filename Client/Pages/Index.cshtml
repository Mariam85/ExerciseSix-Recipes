@page
@model IndexModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Simple Recipes";
}
<head>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0" crossorigin="anonymous">
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>

<body style="background: url('https://images.unsplash.com/photo-1614548539644-ef528186523a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80');
      height: auto;
      background-repeat: no-repeat;
      background-size: cover;
      padding-right:inherit;
      overflow-x:hidden;
      ">
    <div x-data="{loggedIn:false}" x-init="loggedIn = isAuthenticated();">
        <template x-if="!loggedIn">
            <div class="container">
                <br />
                <div x-data="{login:true}" class="row justify-content-center ">
                    <div class="col-md-6">
                        <div id="registerCard" class="card">
                            <ul class="nav nav-tabs">
                                <li class="nav-item">
                                    <a id="loginNavLink" class="nav-link active" aria-current="page" href="#"
                                       x-on:click="switchNavLogin(true);login=true;">Login</a>
                                </li>
                                <li class="nav-item">
                                    <a id="registerNavLink" class="nav-link" href="#"
                                       x-on:click="switchNavLogin(false);login=false;">Signup</a>
                                </li>
                            </ul>
                            <template x-data={username:'',password:''} x-if="login">
                                <form id="loginForm">
                                    <div id="registerCard" class="card-body" x-show="login">
                                        <h4 class="card-title text-center" style="color:#00008B;">Login</h4>
                                        <div class="mb-3">
                                            <label for="usernameInput" class="form-label bol" style="color:#00008B;">Username</label>
                                            <input x-model="username" type="text" class="form-control" id="usernameInput" aria-describedby="usernameHelp">
                                            <span id="usernameHelp" class="form-text"></span>
                                        </div>
                                        <div class="mb-3">
                                            <label for="passwordInput" class="form-label" style="color:#00008B;">Password</label>
                                            <input x-model="password" type="password" id="passwordInput" class="form-control" aria-describedby="passwordHelp">
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" x-on:click="await loginUser(username,password);" class="btn btn-primary">Login</button>
                                    </div>
                                </form>
                            </template>
                            <template x-data="{usernameRegister:'', passwordRegister:''}" x-if="!login">
                                <form id="registerForm">
                                    <div id="registerCard" class="card-body" x-show="!login">
                                        <h4 class="card-title text-center" style="color:#00008B;">Signup</h4>
                                        <div class="mb-3">
                                            <label for="usernameInput" class="form-label" style="color:#00008B;">Username</label>
                                            <input x-model="usernameRegister" type="text" class="form-control" id="usernameInput"
                                                   aria-describedby="usernameHelp" min="1">
                                        </div>
                                        <div class="form-text">
                                            Usernames must have:
                                            <ul>
                                                <li>Between 8 and 30 characters</li>
                                                <li>At least one letter</li>
                                                <li>At least one number</li>
                                            </ul>
                                        </div>
                                        <div class="mb-3">
                                            <label for="passwordInput" class="form-label" style="color:#00008B;">Password</label>
                                            <input x-model="passwordRegister" type="password" id="passwordInput" class="form-control">
                                        </div>
                                        <div class="form-text">
                                            Passwords must have:
                                            <ul>
                                                <li>At least one lower case letter</li>
                                                <li>At least one upper case letter</li>
                                                <li>At least one special character</li>
                                                <li>At least one number</li>
                                                <li>At least 8 characters</li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" x-on:click="loggedIn = await registerUser(usernameRegister,passwordRegister);" class="btn btn-primary">Signup</button>
                                    </div>
                                </form>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </template>
    </div>
    <template x-if="loggedIn" x-init="loggedIn = isAuthenticated();">
        <div x-data="{show:true, tab: 'recipes'}">
            <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
                <div class="container">
                    <a class="navbar-brand" asp-area="" asp-page="/Index">Simple Recipes</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                        <ul class="navbar-nav flex-grow-1">
                            <li class="nav-item">
                                <a class="nav-link" style="cursor: pointer;" x-on:click="tab = 'recipes'">Recipes</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" style="cursor: pointer;" x-on:click="tab = 'categories'">Categories</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" style="cursor: pointer;" onclick="logout();">Logout</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>
            @* Recipes*@
            <div x-show="tab == 'recipes'">
                <div x-effect="recipes = await $store.recipes;"
                     x-data="{ recipes: [] }">
                    <header role="banner">
                        <div>
                            <h1 style="top: 60px; font-family: Lucida Sans Unicode;">Find and share recipes</h1>
                            <button class="button--nina" style="font-family: Arial; display: inline-block; margin-right: 10px;" data-bs-toggle="modal" data-bs-target="#createRecipeModal">
                                <svg class="bi bi-type-bold" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>Add
                            </button>
                        </div>
                        <div class="input-group-text" style="border: none; background: transparent; width: 450px; padding: 15px; margin-left: auto;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                            </svg>
                            <input type="text" style="font-family: Arial; box-shadow: #ff0000; outline: none; background: transparent; border-top-style: hidden; border-right-style: hidden; border-left-style: hidden; border-bottom-style: groove; " id="myFilter" class="form-control" onkeyup="myFunction()" placeholder="Search for a recipe...">
                        </div>
                    </header>
                    <div id="carousel" class="hover-zoom text-center carousel slide container" data-bs-ride="carousel" style="height: 550px;">
                        <div class="container" id="myProducts">
                            <template x-for="recipe in recipes">
                                <div class="hover-zoom carousel-inner " style="margin: auto;">
                                    <div class="item active">
                                        <button style="border-radius: 12px; height: 500px;width:600px;" class="mx-auto border-0 mt-3 zoom  cards  card-body border-1" data-bs-toggle="modal" :data-bs-target="'#detailsModal' + recipe.id">
                                            <h4 x-text="recipe.title" class="cta card-title" style="color:black"></h4>
                                            <template x-for="category in recipe.categories">
                                                <span style="text-align:left; background-color:#00008B" class="badge mb-2 mx-1" x-text="category"></span>
                                            </template>
                                            <br />
                                            <a class="btn btn-primary" data-bs-toggle="modal" :data-bs-target="'#editModal' + recipe.id">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                                                </svg>
                                            </a>
                                            <a class="btn btn-danger" data-bs-toggle="modal" :data-bs-target="'#deleteModal' + recipe.id">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                                </svg>
                                            </a>
                                        </button>
                                    </div>
                                    <div class="modal fade" :id="'editModal'+recipe.id" tabindex="-1">
                                        <div class="modal-dialog modal-dialog-scrollable modal-lg">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" style="color:#00008B;">Edit recipe</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <form x-on:submit.prevent="await editRecipe(recipe);$store.recipes = await getRecipes();"
                                                      x-data="{recipe: {id: recipe.id, title: recipe.title, instructions: '• '+recipe.instructions.join('\n• '), ingredients: '• '+recipe.ingredients.join('\n• '), categories: recipe.categories}, availablecategories: []}"
                                                      x-effect="availablecategories = await $store.cat;recipes=await $store.recipes;">
                                                    <div class="modal-body" style="max-height:535.5px; overflow-y:scroll;overflow-x:hidden;text-align:left;">
                                                        <div class="mb-3 ">
                                                            <label for="title" class="col-2 col-form-label fw-bold " style="width : 100%; ">Title</label>
                                                            <input id="title" class="border-0" x-model="recipe.title">
                                                        </div>
                                                        <div class="my-3 row">
                                                            <label for="editRecipeIngredients" class="col-2 col-form-label fw-bold " style="width : 100%; ">Ingredients</label>
                                                            <div class="col-7" style="width : 100%; ">
                                                                <textarea class=" form-control h-100" x-model="recipe.ingredients" id="editRecipeIngredients" rows="6"></textarea>
                                                            </div>
                                                        </div>
                                                        <div class="my-3 row">
                                                            <label for="editRecipeInstructions" class="col-2 col-form-label fw-bold " style="width : 100%; ">Instructions</label>
                                                            <div class="col-7" style="width : 100%; ">
                                                                <textarea class=" form-control h-100" x-model="recipe.instructions" id="editRecipeInstructions" rows="6"></textarea>
                                                            </div>
                                                        </div>
                                                        <div class="my-3 row">
                                                            <label for="editRecipeCategories" class="col-2 col-form-label fw-bold " style="width : 100%; ">Categories</label>
                                                            <div class="col-7">
                                                                <template x-for="category in availablecategories ">
                                                                    <div>
                                                                        <input :id="'category'+ category.name + recipe.id" type="checkbox" :value="category.name" x-model="recipe.categories">
                                                                        <label style="pointer-events: none;" :for="'category'+ category.name + recipe.id" x-text="category.name"></label>
                                                                        <br />
                                                                    </div>
                                                                </template>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="submit" id="button" class="btn btn-primary">Edit</button>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal fade " :id="'detailsModal'+recipe.id" tabindex="-1">
                                        <div class="modal-dialog modal-dialog-scrollable modal-lg ">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" style="color:#00008B;">Recipe details</h5>
                                                </div>
                                                <form style="text-align:left;overflow-x: hidden;overflow-y: auto;">
                                                    <div class="modal-body">
                                                        <div class="mb-3 ">
                                                            <label for="title" class="col-2 col-form-label fw-bold " style="width : 100%; ">Title</label>
                                                            <input id="title" readonly="readonly" class="border-0" x-model="recipe.title">
                                                        </div>
                                                        <div class="my-3 row">
                                                            <label for="ingred" style="width : 100%; " class="col-form-label col-2 fw-bold ">Ingredients</label>
                                                            <template x-for="ingredients in recipe.ingredients">
                                                                <li name="ingred" x-text="ingredients"></li>
                                                            </template>
                                                        </div>
                                                        <div class="my-3 row">
                                                            <label for="instruc" style="width : 100%; " class="col-form-label col-2 fw-bold ">Instructions</label>
                                                            <template x-for="instructions in recipe.instructions">
                                                                <li name="instruc" x-text="instructions"></li>
                                                            </template>
                                                        </div>
                                                        <div class="my-3 row">
                                                            <label for="categ" class="col-form-label col-2 fw-bold " style="width : 100%; ">Categories</label>
                                                            <template x-for="category in recipe.categories">
                                                                <li name="categ" x-text="category"></li>
                                                            </template>
                                                        </div>
                                                    </div>
                                                </form>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="modal fade" id="createRecipeModal" tabindex="-1" aria-labelledby="createRecipeModalLabel" aria-hidden="true">
                                        <div class="modal-dialog modal-dialog-scrollable modal-lg">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="createRecipeModalLabel" style="color:#00008B;">Add recipe</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <form method="post"
                                                      x-on:submit.prevent="await addRecipe(recipe);"
                                                      x-data="{recipe: {title: '', ingredients: '', instructions: '', categories:[]}, availablecategories: ''}"
                                                      x-effect="availablecategories = await $store.cat">
                                                    <div class="modal-body" style="max-height: 535.5px; overflow-x: hidden;overflow-y: scroll; text-align: left;">
                                                        <div class="mb-3">
                                                            <label style="width : 100%; " class="col-form-label col-2 fw-bold " for="createRecipeTitle">Title</label>
                                                            <div class="col-7">
                                                                <input id="createRecipeTitle" x-model="recipe.title" class=" form-control h-100" placeholder="Enter the title..." />
                                                            </div>
                                                        </div>
                                                        <div class="my-3 row">
                                                            <label style="width : 100%; " class="col-form-label col-2 fw-bold " for="createRecipeIngredients">Ingredients</label>
                                                            <div class="col-7">
                                                                <textarea style="width:750px;" rows="6" class=" form-control h-100" x-model="recipe.ingredients" id="createRecipeIngredients" placeholder="Place '• ' before each ingredient..."></textarea>
                                                            </div>
                                                        </div>

                                                        <div class="my-3 row">
                                                            <label style="width : 100%; " class="col-form-label col-2 fw-bold " for="createRecipeInstructions" \>Instructions</label>
                                                            <div class="col-7">
                                                                <textarea style="width:750px;" rows="6" class=" form-control h-100" x-model="recipe.instructions" id="createRecipeInstructions" placeholder="Place '• ' before each instruction..."></textarea>
                                                            </div>
                                                        </div>

                                                        <div class="my-3 row">
                                                            <label style="width : 100%; " class="col-form-label col-2 fw-bold " for="createRecipeCategories">Categories</label>
                                                            <div class="col-7">
                                                                <template x-for="category in availablecategories">
                                                                    <div>
                                                                        <input :id="'category'+ category.name + recipe.id" type="checkbox" :value="category.name" x-model="recipe.categories">
                                                                        <label style="pointer-events: none;" :for="'category'+ category.name + recipe.id" x-text="category.name" disabled></label>
                                                                        <br />
                                                                    </div>
                                                                </template>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="submit" class="btn btn-primary">
                                                            Add
                                                        </button>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="modal fade" :id="'deleteModal'+recipe.id" tabindex="-1">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" style="color:#00008B;">Delete recipe</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <form style="text-align:center;" x-on:submit.prevent="await deleteRecipe(id);$store.recipes = await getRecipes();"
                                                      x-data="{id: ''};"
                                                      x-effect="id=recipe.id;">
                                                    <div class="modal-body">
                                                        <div>
                                                            <label class="col-form-label fw-bold ">Are you sure you want to delete this recipe?</label>
                                                            <br />
                                                            <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">
                                                                Yes
                                                            </button>
                                                            <button type="button" data-bs-dismiss="modal" class="btn btn-danger" onclick="Swal.fire({
                                                                            title: 'No changes are applied!',
                                                                            icon: 'info',
                                                                            confirmButtonColor: '#0275d8'
                                                                            });">
                                                                No
                                                            </button>
                                                        </div>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
            @* Categories *@
            <div x-show="tab=='categories'">
                <div x-effect="cat = await $store.cat;"
                     x-data="{ cat: [] }">
                    <header role="banner">
                        <h1 style="font-family: Lucida Sans Unicode;">Find and share categories</h1>
                    </header>
                    <button class="button--nina" style="font-family: Arial;" data-bs-toggle="modal" :data-bs-target="'#addCategoryModal'">
                        <svg class="bi bi-type-bold bi-plus" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                        </svg>Add
                    </button>
                    <div style="margin-left: auto; margin-right: auto; width: 700px; height: 500px; overflow-y: auto;">
                        <table style="margin-left: auto; margin-right: auto;" id="add_table" class="table-striped bg-light table" data-toggle="table" data-mobile-responsive="true">
                            <thead class="table-info">
                                <tr>
                                    <th>Categories</th>
                                    <th>Rename</th>
                                    <th>Remove</th>
                                </tr>
                            </thead>
                            <tbody>
                                <template x-for="category in cat">
                                    <tr>
                                        <td>
                                            <input style="background-color: rgba(0, 0, 0, 0);" class="border-0 " id="oldVal" name="oldVal" x-model="category.name" />
                                        </td>
                                        <td>
                                            <button type="button" class="btn  btn btn-primary add" id="btn" data-bs-toggle="modal" :data-bs-target="'#editCategoryModal' + category.id">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                                                </svg>
                                            </button>
                                        </td>
                                        <td>
                                            <form>
                                                <button type="button" class="btn  btn btn-danger delete_row" data-bs-toggle="modal" :data-bs-target="'#removeCategoryModal' + category.id">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                                    </svg>
                                                </button>
                                            </form>

                                            <div class="modal fade" :id="'editCategoryModal' + category.id;" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <h5 class="modal-title" style="color:#00008B;">Rename category</h5>
                                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <form x-on:submit.prevent="await renameCategory(oldCategory, editedCategory);$store.cat = await getCategories();$store.recipes = await getRecipes();$el.reset(); editedCategory = '';"
                                                              x-data="{oldCategory: '', editedCategory: ''}"
                                                              x-effect="oldCategory=category.name;">
                                                            <div class="modal-body">
                                                                <div>
                                                                    <label for="editCategoryTitle" class="col-form-label fw-bold ">Enter the new name</label>&nbsp
                                                                    <div class="col-10">
                                                                        <input id="editCategoryTitle" x-model="editedCategory" class="form-control" />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">
                                                                    Edit
                                                                </button>
                                                            </div>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="modal fade" :id="'removeCategoryModal' + category.id;" tabindex="-1" aria-labelledby="removeCategoryModalLabel" aria-hidden="true">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <h5 class="modal-title" style="color:#00008B;">Remove category</h5>
                                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <form style="text-align:center;" x-on:submit.prevent="await removeCategory(category.name);cat = await getCategories();">
                                                            <div class="modal-body">
                                                                <div>
                                                                    <label class="col-form-label fw-bold ">Are you sure you want to delete this category?</label>
                                                                    <br />
                                                                    <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">
                                                                        Yes
                                                                    </button>
                                                                    <button type="button" data-bs-dismiss="modal" class="btn btn-danger" onclick="Swal.fire({
                                                                            title: 'No changes are applied!',
                                                                            icon: 'info',
                                                                            confirmButtonColor: '#0275d8'
                                                                            });">
                                                                        No
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="modal fade" :id="'addCategoryModal'" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <h5 class="modal-title" style="color:#00008B;">Add category</h5>
                                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <form x-on:submit.prevent="await addCategory(newCategory); $el.reset(); newCategory = '';cat = await getCategories();"
                                                              x-data="{newCategory: ''}">
                                                            <div class="modal-body">
                                                                <div>
                                                                    <label for="editCategoryTitle" class="col-form-label fw-bold ">Enter category's name</label>&nbsp
                                                                    <div class="col-10">
                                                                        <input id="newCategoryTitle" x-model="newCategory" class="form-control" />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">
                                                                    Add
                                                                </button>
                                                            </div>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </template>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </template>

</body>

<script>
    document.addEventListener('alpine:init', () => {
        if (isAuthenticated() == true) {
            Alpine.store('recipes', getRecipes());
            Alpine.store('cat', getCategories());
        }
    });

	async function getToken() {
        let response = await fetch('@Configuration["Server"]' + 'antiforgery', {
			method: "GET",
			headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('token'),
			},
			credentials: 'include'
		});
		if (response.ok) {
			return document.cookie
				.split("; ")
				.find(row => row.startsWith("XSRF-TOKEN="))
				.split("=")[1];
		}
	}

    function switchNavLogin(login) {
        if (login) {
            document.getElementById("loginNavLink").classList.add("active");
            document.getElementById("registerNavLink").classList.remove("active");
        }
        else {
            document.getElementById("registerNavLink").classList.add("active");
            document.getElementById("loginNavLink").classList.remove("active");
        }
    }

    // Checking if the user is logged in.
    function isAuthenticated() {
        if (localStorage.token) {
            return true;
        }
        return false;
    }

    // Signup function.
    async function registerUser(username, password) {
        if (username.length == 0 || password.length == 0) {
            Swal.fire({
                icon: 'error',
                title: 'Failed',
                text: 'Please enter a username and a password',
                confirmButtonColor: '#0275d8'
            });
            return false;
        }
        let response = await fetch('@Configuration["Server"]' + 'account/signup?username=' + username + '&password=' + password, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        response.text().then(function (text) {
            if (text.includes("Username already exists")) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed',
                    text: 'this username already exists',
                    confirmButtonColor: '#0275d8'
                });
            }
            else if (text.includes("Password is invalid")) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed',
                    text: 'please follow the password requirements',
                    confirmButtonColor: '#0275d8'
                });
            }
            else if (text.includes("Username is invalid")) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed',
                    text: 'please follow the username requirements',
                    confirmButtonColor: '#0275d8'
                });
            }
            else if (response.status === 200) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'successfuly created an account!',
                    confirmButtonColor: '#0275d8'
                }).then(() => {
                    return true;
                });
            }
            else {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed',
                    text: 'Could not signup',
                    confirmButtonColor: '#0275d8'
                });
            }
        });
    }

    // Login function.
    async function loginUser(username, password) {
        if (password.length == 0 || username.length == 0) {
            Swal.fire({
                icon: 'error',
                title: 'Failed',
                text: 'Please enter a password and a username',
                confirmButtonColor: '#0275d8'
            });
            this.loggedIn = false;
            return;
        }
        let response = await fetch('@Configuration["Server"]' + 'account/login?username=' + username + '&password=' + password, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        if (response.status == 200) {
            const responseJson = await response.json();
            Swal.fire({
                title: 'Success!',
                text: 'successfuly logged in!',
                icon: 'success',
                confirmButtonColor: '#0275d8'
            }).then(
                function () {
                    localStorage.setItem('token', responseJson['token']);
                    localStorage.setItem('userName', username);
                    localStorage.setItem('refreshToken', responseJson['refresh']);
                    this.loggedIn = true;
                    document.location.reload();
                });
        }
        else {
            response.text().then(function (text) {
                if (text.includes("This user does not exist.")) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed',
                        text: 'This user does not exist',
                        confirmButtonColor: '#0275d8'
                    });
                }
                else if (text.includes("The password entered is incorrect.")) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed',
                        text: 'The password entered is incorrect',
                        confirmButtonColor: '#0275d8'
                    });
                }
                else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed',
                        text: 'Could not login',
                        confirmButtonColor: '#0275d8'
                    });
                }
            });
            this.loggedIn = false;
            return;
        }
    }

    // Logout function
    function logout() {
        Swal.fire({
            title: 'Are you sure you want to logout?',
            icon: 'warning',
            showDenyButton: true,
            confirmButtonText: 'Yes',
            denyButtonText: `No`,
            confirmButtonColor: '#0275d8'
        }).then((result) => {
            if (result.isConfirmed) {
                localStorage.setItem('token', '');
                localStorage.setItem('refreshToken', '');
                this.loggedIn = false;
                document.location.reload();
            }
        })
    }

    // Search functon.
    function myFunction() {
        var input, filter, cards, cardContainer, title, i;
        input = document.getElementById("myFilter");
        filter = input.value.toUpperCase();
        cardContainer = document.getElementById("myProducts");
        cards = cardContainer.getElementsByClassName("item");
        for (i = 0; i < cards.length; i++) {
            title = cards[i].querySelector(".card-title");
            if (title.innerText.toUpperCase().indexOf(filter) > -1) {
                cards[i].style.display = "";
            } else {
                cards[i].style.display = "none";
            }
        }
    }

    // Adding a recipe.
    async function addRecipe(recipe) {
        // Checking that all the textboxes are filled.
        if (recipe.title.trim().length === 0 || recipe.ingredients.trim().length === 0 || recipe.instructions.trim().length === 0 || recipe.categories.length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Not all of the parameters are filled...',
                text: `please fill out the text boxes`,
                confirmButtonColor: '#0275d8'
            })
        }
        else {
            let ingredients = recipe.ingredients.replaceAll('\n', '').split('• ');
            ingredients.shift();
            let instructions = recipe.instructions.replaceAll('\n', '').split('• ');
            instructions.shift();

            const antiforgery = await getToken();
            let response = await fetch('@Configuration["Server"]' + 'recipes/add-recipe/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    "X-XSRF-TOKEN": antiforgery,
                    'Authorization': 'Bearer ' + localStorage.getItem("token"),
                },
                body: JSON.stringify({
                    id: recipe.id,
                    ingredients: ingredients,
                    title: recipe.title,
                    instructions: instructions,
                    categories: recipe.categories
                }),
                credentials: 'include'
            })
                .catch((error) => {
                    console.error('Error:', error);
                });
            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: recipe.title + ' is successfuly added!',
                    icon: 'success',
                    confirmButtonColor: '#0275d8'

                });
                $('#createRecipeModal').modal('hide');
                Alpine.store('recipes', getRecipes());
            }
            else if (response.headers.get('is-token-expired')) {
                await refresh("k");
                return await addRecipe(recipe);
            }
            else {
                Swal.fire({
                    title: 'Could not add recipe!',
                    icon: 'info',
                    confirmButtonColor: '#0275d8'
                })
            }
        }
    }

    // Editing recipes.
    async function editRecipe(recipe) {
        let resetRecipe = false;
        let found = false;
        let c = await getCategories();

        for (let i = 0; i < c.length; i++) {
            const index = recipe.categories.indexOf(c[i].name);
            if (index != -1) {
                found = true;
                break;
            }
        }
        // Checking that all the textboxes are filled.
        if (recipe.title.trim().length === 0 || recipe.ingredients.trim().length === 0 || recipe.instructions.trim().length === 0 || recipe.categories.length === 0 || !found) {
            Swal.fire({
                icon: 'error',
                title: 'Not all of the parameters are filled...',
                text: `please fill out the text boxes`,
                confirmButtonColor: '#0275d8'
            })
            resetRecipe = true;
        }
        else {
            let ingredients = recipe.ingredients.replaceAll('\n', '').split('• ');
            ingredients.shift();
            let instructions = recipe.instructions.replaceAll('\n', '').split('• ');
            instructions.shift();

            const antiforgery = await getToken();
            let url = '@Configuration["Server"]' + 'recipes/edit-recipe/' + recipe.id;
            let response = await fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    "X-XSRF-TOKEN": antiforgery,
                    'Authorization': 'Bearer ' + localStorage.getItem("token"),
                },
                body: JSON.stringify({
                    id: recipe.id,
                    ingredients: ingredients,
                    title: recipe.title,
                    instructions: instructions,
                    categories: recipe.categories
                }),
                credentials: 'include'
            });
            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: 'recipe is successfuly edited!',
                    icon: 'success',
                    confirmButtonColor: '#0275d8'
                });
                $('#editModal' + recipe.id).modal('hide');
            }
            else if (response.headers.get('is-token-expired')) {
                await refresh("k");
                return await editRecipe(recipe);
            }
            else {
                resetRecipe = true;
                Swal.fire({
                    title: 'No changes are applied!',
                    icon: 'info',
                    confirmButtonColor: '#0275d8'
                });
            }
        }
        if (resetRecipe) {
            await listRecipe(recipe, recipeDetails);
        }
        Alpine.store('recipes', getRecipes());
    }

    // Listing a recipe.
    async function listRecipe(recipe, recipeDetails) {
        const antiforgery = await getToken();
        let url = '@Configuration["Server"]' + 'recipes/list-recipe/' + recipe.id;
        let oldRecipe = await fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                "X-XSRF-TOKEN": antiforgery,
                'Authorization': 'Bearer ' + localStorage.getItem("token"),
            },
            credentials: 'include'
        });
        if (oldRecipe.headers.get('is-token-expired')) {
            await refresh("k");
            return await listRecipe(recipe, recipeDetails);
        }
        else {
            oldRecipe.text().then(function (text) {
                recipeDetails = JSON.parse(text);
                recipe.id = recipeDetails.id;
                recipe.ingredients = '• ' + recipeDetails.ingredients.join('\n• ');
                recipe.title = recipeDetails.title;
                recipe.instructions = '• ' + recipeDetails.instructions.join('\n• ');
                recipe.categories = recipeDetails.categories;
            });
        }
    }

    // Refresh token.
    async function refresh(c) {
        let response = await fetch('@Configuration["Server"]' + 'token/refresh-token/?refreshToken=' + localStorage.getItem("refreshToken"), {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
        });
        if (!response.ok) {
            if (c == "getCategories")
                return await getCategories();
            else if (c == "getRecipes")
                return await getRecipes();
            else
                return;
        }
        const responseJson = await response.json();
        localStorage.setItem('refreshToken', responseJson['refresh']);
        localStorage.setItem('token', responseJson['token']);
    }

    // Listing recipes.
    async function getRecipes() {
        var antiforgery = await getToken();
        let response = await fetch('@Configuration["Server"]' + 'recipes', {
            headers: {
                'Content-Type': 'application/json',
                "X-XSRF-TOKEN": antiforgery,
                'Authorization': 'Bearer ' + localStorage.getItem("token"),
            },
            credentials: 'include'
        });
        if (response.ok) {
            return response.json();
        }
        else if (response.headers.get('is-token-expired')) {
            await refresh("getRecipes");
            return await getRecipes();
        }
    }

    // Listing categories.
    async function getCategories() {
        var antiforgery = await getToken();
        let response = await fetch('@Configuration["Server"]' + 'categories', {
            headers: {
                'Content-Type': 'application/json',
                "X-XSRF-TOKEN": antiforgery,
                'Authorization': 'Bearer ' + localStorage.getItem("token"),
            },
            credentials: 'include'
        });
        if (response.ok) {
            return response.json();
        }
        else if (response.headers.get('is-token-expired')) {
            await refresh("getCategories");
            return await getCategories();
        }
    }

    // Deleting a recipe.
    async function deleteRecipe(recipe) {
        const antiforgery = await getToken();
        let response = await fetch('@Configuration["Server"]' + 'recipes/delete-recipe/' + recipe, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                "X-XSRF-TOKEN": antiforgery,
                'Authorization': 'Bearer ' + localStorage.getItem("token"),
            },
            credentials: 'include'
        })
        if (response.ok) {
            Alpine.store('recipes', getRecipes());
            Swal.fire({
                title: 'Success!',
                text: 'successfuly deleted!',
                icon: 'success',
                confirmButtonColor: '#0275d8'
            })
        }
        else if (response.headers.get('is-token-expired')) {
            await refresh("k");
            return await deleteRecipe(recipe);
        }
        else {
            Swal.fire({
                title: 'No changes are applied!',
                icon: 'info',
                confirmButtonColor: '#0275d8'
            })
        }
    }

    // Deleting a category.
    async function removeCategory(oldCategory) {
        const antiforgery = await getToken();
        let url = '@Configuration["Server"]' + 'recipes/remove-category/' + oldCategory;
        let response = await fetch(url,
            {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    "X-XSRF-TOKEN": antiforgery,
                    'Authorization': 'Bearer ' + localStorage.getItem("token"),
                },
                credentials: 'include'
            })
        if (response.ok) {
            Swal.fire({
                title: 'Success!',
                text: oldCategory + ' is deleted!',
                icon: 'success',
                confirmButtonColor: '#0275d8'

            });
            Alpine.store('cat', getCategories());
            Alpine.store('recipes', getRecipes());
        }
        else if (response.headers.get('is-token-expired')) {
            await refresh("k");
            return await removeCategory(oldCategory);
        }
        else {
            Swal.fire({
                title: 'No changes are applied!',
                icon: 'info',
                confirmButtonColor: '#0275d8'
            })
        }
    }

    // Adding a category.
    async function addCategory(category) {
        if (category.trim().length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'No category name was given...',
                text: `please fill out the text box`,
                confirmButtonColor: '#0275d8'
            })
        }
        else {
            const antiforgery = await getToken();
            let response = await fetch('@Configuration["Server"]' + 'recipes/add-category/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    "X-XSRF-TOKEN": antiforgery,
                    'Authorization': 'Bearer ' + localStorage.getItem("token"),
                },
                body: JSON.stringify({
                    Name: category
                }),
                credentials: 'include'
            })
            if (response.headers.get('is-token-expired')) {
                await refresh("k");
                return await addCategory(category);
            }
            else {
                response.text().then(function (text) {
                    if (text.includes("This category already exists")) {
                        Swal.fire({
                            icon: 'error',
                            title: 'A category of this name exists...',
                            text: `please enter a non-existing name`,
                            confirmButtonColor: '#0275d8'
                        });
                    }
                    else if (response.ok) {
                        Swal.fire({
                            title: 'Success!',
                            text: category + ' is successfuly added!',
                            icon: 'success',
                            confirmButtonColor: '#0275d8'

                        });
                        Alpine.store('cat', getCategories());
                    }
                    else {
                        Swal.fire({
                            title: 'Could not add category!',
                            icon: 'info',
                            confirmButtonColor: '#0275d8'
                        });
                    }
                });
            }
        }
    }

    // Renaming a category.
    async function renameCategory(name, newName) {
        if (newName.trim().length === 0) {
            Swal.fire({
                icon: 'error',
                title: 'No new category name was given...',
                text: `please fill out the text box`,
                confirmButtonColor: '#0275d8'
            })
        }
        else {
            const antiforgery = await getToken();
            let url = '@Configuration["Server"]' + 'categories/rename-category?oldName=' + name + '&newName=' + newName;
            let response = await fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    "X-XSRF-TOKEN": antiforgery,
                    'Authorization': 'Bearer ' + localStorage.getItem("token"),
                },
                credentials: 'include'
            });
            if (response.headers.get('is-token-expired')) {
                await refresh("k");
                return await renameCategory(name, newName);
            }
            else {
                response.text().then(function (text) {
                    if (text.includes("new category name already exists")) {
                        Swal.fire({
                            icon: 'error',
                            title: 'A category of this name exists...',
                            text: `please enter a non-existing name`,
                            confirmButtonColor: '#0275d8'
                        });
                    }
                    else if (text.includes("you have entered the same name")) {
                        Swal.fire({
                            title: 'No changes are applied!',
                            text: 'please enter a new name',
                            icon: 'info',
                            confirmButtonColor: '#0275d8'
                        });
                    }
                    else if (response.ok) {
                        Swal.fire({
                            title: 'Success!',
                            text: name + ' is renamed to ' + newName + '!',
                            icon: 'success',
                            confirmButtonColor: '#0275d8'
                        });
                        Alpine.store('cat', getCategories());
                        Alpine.store('recipes', getRecipes());
                    }
                    else {
                        Swal.fire({
                            title: 'No changes are applied!',
                            icon: 'info',
                            confirmButtonColor: '#0275d8'
                        });
                    }
                });
            }
        }
    }
</script>